[{"E:\\Programming\\simple_quora\\src\\index.js":"1","E:\\Programming\\simple_quora\\src\\App.js":"2","E:\\Programming\\simple_quora\\src\\reportWebVitals.js":"3","E:\\Programming\\simple_quora\\src\\components\\controllers\\askQuestion.js":"4","E:\\Programming\\simple_quora\\src\\components\\model\\questions.js":"5","E:\\Programming\\simple_quora\\src\\components\\views\\question.js":"6","E:\\Programming\\simple_quora\\src\\components\\views\\mainPoster.js":"7","E:\\Programming\\simple_quora\\src\\components\\views\\mainGetter.js":"8","E:\\Programming\\simple_quora\\src\\components\\views\\headerBar.js":"9","E:\\Programming\\simple_quora\\src\\components\\controllers\\seeAnswers.js":"10","E:\\Programming\\simple_quora\\src\\components\\model\\answers.js":"11","E:\\Programming\\simple_quora\\src\\components\\views\\answer.js":"12","E:\\Programming\\simple_quora\\src\\components\\controllers\\seeComments.js":"13","E:\\Programming\\simple_quora\\src\\components\\model\\comments.js":"14","E:\\Programming\\simple_quora\\src\\components\\views\\comment.js":"15","E:\\Programming\\simple_quora\\src\\components\\controllers\\login.js":"16","E:\\Programming\\simple_quora\\src\\components\\userContext.js":"17","E:\\Programming\\simple_quora\\src\\components\\model\\hash.js":"18","E:\\Programming\\simple_quora\\src\\components\\controllers\\navigation.js":"19","E:\\Programming\\simple_quora\\src\\components\\model\\user.js":"20","E:\\Programming\\simple_quora\\src\\components\\controllers\\logout.js":"21","E:\\Programming\\simple_quora\\src\\components\\controllers\\delete.js":"22","E:\\Programming\\simple_quora\\src\\components\\bgImages\\background.js":"23","E:\\Programming\\simple_quora\\src\\components\\model\\hasVoted.js":"24","E:\\Programming\\simple_quora\\src\\components\\views\\errorDisplay.js":"25","E:\\Programming\\simple_quora\\src\\components\\enums\\enums.js":"26","E:\\Programming\\simple_quora\\src\\components\\enums\\hosts.js":"27","E:\\Programming\\simple_quora\\src\\components\\controllers\\voters.js":"28","E:\\Programming\\simple_quora\\src\\components\\enums\\db_enums.js":"29","E:\\Programming\\simple_quora\\src\\components\\enums\\content_type_enums.js":"30","E:\\Programming\\simple_quora\\src\\components\\controllers\\replies.js":"31","E:\\Programming\\simple_quora\\src\\components\\errorContext.js":"32"},{"size":628,"mtime":1608741107102,"results":"33","hashOfConfig":"34"},{"size":528,"mtime":499162500000,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"34"},{"size":2587,"mtime":1609530997397,"results":"37","hashOfConfig":"34"},{"size":1200,"mtime":1609522786241,"results":"38","hashOfConfig":"34"},{"size":1529,"mtime":1609515147184,"results":"39","hashOfConfig":"34"},{"size":379,"mtime":1608413987050,"results":"40","hashOfConfig":"34"},{"size":377,"mtime":1608927601617,"results":"41","hashOfConfig":"34"},{"size":473,"mtime":1608671076521,"results":"42","hashOfConfig":"34"},{"size":2790,"mtime":1609524788205,"results":"43","hashOfConfig":"34"},{"size":1194,"mtime":1609523681848,"results":"44","hashOfConfig":"34"},{"size":1521,"mtime":1609514592338,"results":"45","hashOfConfig":"34"},{"size":3422,"mtime":1609530137115,"results":"46","hashOfConfig":"34"},{"size":1193,"mtime":1609524829744,"results":"47","hashOfConfig":"34"},{"size":1854,"mtime":1609530517586,"results":"48","hashOfConfig":"34"},{"size":3401,"mtime":1609903253600,"results":"49","hashOfConfig":"34"},{"size":249,"mtime":1608599456975,"results":"50","hashOfConfig":"34"},{"size":323,"mtime":1608667995309,"results":"51","hashOfConfig":"34"},{"size":1043,"mtime":1609517854680,"results":"52","hashOfConfig":"34"},{"size":1172,"mtime":1609621007779,"results":"53","hashOfConfig":"34"},{"size":606,"mtime":1609902272457,"results":"54","hashOfConfig":"34"},{"size":1090,"mtime":1609526271829,"results":"55","hashOfConfig":"34"},{"size":1328,"mtime":1608753849685,"results":"56","hashOfConfig":"34"},{"size":1191,"mtime":1609513375282,"results":"57","hashOfConfig":"34"},{"size":896,"mtime":1609522618764,"results":"58","hashOfConfig":"34"},{"size":113,"mtime":1609513300593,"results":"59","hashOfConfig":"34"},{"size":268,"mtime":1609629194813,"results":"60","hashOfConfig":"34"},{"size":2543,"mtime":1609524168768,"results":"61","hashOfConfig":"34"},{"size":112,"mtime":1609512979797,"results":"62","hashOfConfig":"34"},{"size":117,"mtime":1609513552348,"results":"63","hashOfConfig":"34"},{"size":1477,"mtime":1609530848295,"results":"64","hashOfConfig":"34"},{"size":151,"mtime":1609517789191,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"su4cgr",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"68"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"68"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"68"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"E:\\Programming\\simple_quora\\src\\index.js",[],["135","136"],"E:\\Programming\\simple_quora\\src\\App.js",[],"E:\\Programming\\simple_quora\\src\\reportWebVitals.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\askQuestion.js",["137"],"import React, { useEffect, useState, useContext } from 'react'\r\n\r\nimport UserContext from \"../userContext.js\"\r\nimport ErrorContext from \"../errorContext.js\"\r\n\r\nimport { getQuestions, postQuestions } from \"../model/questions.js\"\r\n\r\nimport { QuestionDisplay } from \"../views/question.js\"\r\nimport { MainPoster } from \"../views/mainPoster.js\"\r\nimport { MainGetter } from \"../views/mainGetter.js\"\r\n\r\nimport ErrorBox from \"../views/errorDisplay.js\"\r\n\r\nfunction AskScreen () {\r\n    const [questionPost, setQuestionPost] = useState('')\r\n    const [questionGet, setQuestionGet] = useState([])\r\n\r\n    const [search, setSearch] = useState('')\r\n\r\n    const [pageMode, setPageMode] = useState('search')\r\n\r\n    const loginInfo = useContext(UserContext)\r\n    const errorHandle = useContext(ErrorContext)\r\n\r\n    async function getQ () {\r\n        let params = {}\r\n        if (search !== '') {\r\n            params[\"search\"] = search\r\n        }\r\n        \r\n        let response = await getQuestions(params)\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting questions\" response={body} />)\r\n        } else {\r\n            setQuestionGet(body)\r\n        }\r\n    }\r\n\r\n    async function postQ () {\r\n        let response = await postQuestions({\"text\": questionPost, \"author\": loginInfo.username})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"posting questions\" response={body} />)\r\n        } else {\r\n            setQuestionGet([body, ...questionGet])\r\n        }\r\n    }\r\n\r\n    function refreshAfterDelete (index) {\r\n        let newArr = [...questionGet]\r\n        newArr.splice(index, 1)\r\n        setQuestionGet(newArr)\r\n    }\r\n\r\n    useEffect(() => getQ(), [])\r\n\r\n    const mode = {\r\n        'search': <MainGetter setFunc={setSearch} getFunc={getQ} />,\r\n        'ask': <MainPoster setFunc={setQuestionPost} postFunc={postQ} placeholder=\"Got a question?\" buttonText=\"Ask the Community!\" />\r\n    }\r\n\r\n    return (\r\n        <div className=\"contentWrapper\">\r\n            <div className=\"pageTopSwitch\">\r\n                <button className=\"mainButton\" onClick={e => setPageMode('ask')}>Ask the Kworah Community!</button>\r\n                <button className=\"mainButton\" onClick={e => setPageMode('search')}>See what's been asked!</button>\r\n            </div>\r\n            {mode[pageMode]}\r\n            <QuestionDisplay questions={questionGet} getQ={getQ} delRefresh={refreshAfterDelete} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AskScreen\r\n","E:\\Programming\\simple_quora\\src\\components\\model\\questions.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\question.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\mainPoster.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\mainGetter.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\headerBar.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\seeAnswers.js",["138"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport UserContext from \"../userContext.js\"\r\nimport ErrorContext from \"../errorContext.js\"\r\n\r\nimport { getQuestions } from \"../model/questions.js\"\r\nimport { getAnswers, postAnswers } from \"../model/answers.js\"\r\n\r\nimport { QuestionDisplay } from \"../views/question.js\";\r\nimport { AnswerDisplay } from \"../views/answer.js\"\r\nimport { MainPoster } from \"../views/mainPoster.js\"\r\n\r\nimport ErrorBox from \"../views/errorDisplay.js\"\r\n\r\nfunction SeeAnswers (props) {\r\n    const [questionGet, setQuestionGet] = useState([])\r\n    const [answerGet, setAnswerGet] = useState([])\r\n    const [answerPost, setAnswerPost] = useState('')\r\n\r\n    const loginInfo = useContext(UserContext)\r\n    const errorHandle = useContext(ErrorContext)\r\n\r\n    async function getQ () {\r\n        let response = await getQuestions({'id': props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting questions\" response={body} />)\r\n        } else {\r\n            setQuestionGet(body)\r\n        }\r\n    }\r\n\r\n    async function getA () {\r\n        let response = await getAnswers({'question_id': props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting answers\" response={body} />)\r\n        } else {\r\n            setAnswerGet(body)\r\n        }\r\n    }\r\n\r\n    async function postA () {\r\n        let response = await postAnswers({\"text\": answerPost, \"author\": loginInfo.username, \"question\": props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"posting answers\" response={body} />)\r\n        } else {\r\n            setAnswerGet([body, ...answerGet])\r\n        }\r\n    }\r\n\r\n    function refreshAfterDelete (index) {\r\n        let newArr = [...answerGet]\r\n        newArr.splice(index, 1)\r\n        setAnswerGet(newArr)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getQ()\r\n        getA()\r\n    }, [])  // empty array passed to prevent infinite firing\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"pageTopSwitch\">\r\n                <Link to=\"/\" >\r\n                    <button className=\"mainButton\">Back to Questions Page</button>\r\n                </Link>\r\n            </div>\r\n            <MainPoster setFunc={setAnswerPost} postFunc={postA} placeholder=\"Help the asker out!\" buttonText=\"Answer!\" />\r\n            <QuestionDisplay questions={questionGet} getQ={getQ} />\r\n            <AnswerDisplay answers={answerGet} getA={getA} delRefresh={refreshAfterDelete} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SeeAnswers\r\n","E:\\Programming\\simple_quora\\src\\components\\model\\answers.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\answer.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\seeComments.js",["139"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport UserContext from '../userContext.js'\r\nimport ErrorContext from \"../errorContext.js\"\r\n\r\nimport { getAnswers } from \"../model/answers.js\"\r\nimport { getComments, postComments } from \"../model/comments.js\"\r\n\r\nimport { AnswerDisplay } from \"../views/answer.js\";\r\nimport { CommentDisplay } from \"../views/comment.js\"\r\nimport { MainPoster } from \"../views/mainPoster.js\"\r\n\r\nimport ErrorBox from \"../views/errorDisplay.js\"\r\n\r\nfunction SeeComments (props) {\r\n    const [answerGet, setAnswerGet] = useState([])\r\n    const [commentGet, setCommentGet] = useState([])\r\n    const [commentPost, setCommentPost] = useState('')\r\n    const [backToQuestion, setBackToQuestion] = useState()\r\n\r\n    const loginInfo = useContext(UserContext)\r\n    const errorHandle = useContext(ErrorContext)\r\n\r\n    async function backToAnswers () {\r\n        let response = await getAnswers({'id': props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting answer for 'back to' button\" response={body} />)\r\n        } else {\r\n            setBackToQuestion(body[0].question)\r\n        }\r\n    }\r\n\r\n    async function getA () {\r\n        let response = await getAnswers({'id': props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting answers\" response={body} />)\r\n        } else {\r\n            setAnswerGet(body)\r\n        }\r\n    }\r\n\r\n    async function getC () {\r\n        let response = await getComments({'answer_id': props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"getting comments\" response={body} />)\r\n        } else {\r\n            setCommentGet(body)\r\n        }\r\n    }\r\n\r\n    function refreshAfterPost (response, body) {\r\n        if (response.status >= 400) {\r\n            errorHandle.setError(<ErrorBox msg=\"posting comments\" response={body} />)\r\n        } else {\r\n            setCommentGet([...commentGet, body])\r\n        }\r\n    }\r\n\r\n    async function postC () {\r\n        let response = await postComments({\"text\": commentPost, \"author\": loginInfo.username, \"answer\": props.match.params.id})\r\n        let body = await response.json()\r\n\r\n        refreshAfterPost(response, body)\r\n    }\r\n\r\n    function refreshAfterDelete (index) {\r\n        let newArr = [...commentGet]\r\n        newArr.splice(index, 1)\r\n        setCommentGet(newArr)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getA()\r\n        getC()\r\n        backToAnswers()\r\n    }, [])  // empty array passed to prevent infinite firing\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"pageTopSwitch\">\r\n                <Link to={`/answersToQuestion/${backToQuestion}`} >\r\n                    <button className=\"mainButton\">Back to Answers Page</button>\r\n                </Link>\r\n            </div>\r\n            <MainPoster setFunc={setCommentPost} postFunc={postC} placeholder=\"Comment...\" buttonText=\"Post Comment\" />\r\n            <AnswerDisplay answers={answerGet} getA={getA} />\r\n            <CommentDisplay comments={commentGet} getC={getC} delRefresh={refreshAfterDelete} postRefresh={refreshAfterPost} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SeeComments\r\n","E:\\Programming\\simple_quora\\src\\components\\model\\comments.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\comment.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\login.js",[],"E:\\Programming\\simple_quora\\src\\components\\userContext.js",[],"E:\\Programming\\simple_quora\\src\\components\\model\\hash.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\navigation.js",[],"E:\\Programming\\simple_quora\\src\\components\\model\\user.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\logout.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\delete.js",[],"E:\\Programming\\simple_quora\\src\\components\\bgImages\\background.js",[],"E:\\Programming\\simple_quora\\src\\components\\model\\hasVoted.js",[],"E:\\Programming\\simple_quora\\src\\components\\views\\errorDisplay.js",[],"E:\\Programming\\simple_quora\\src\\components\\enums\\enums.js",[],"E:\\Programming\\simple_quora\\src\\components\\enums\\hosts.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\voters.js",["140"],"import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport UserContext from '../userContext.js'\r\nimport ErrorContext from \"../errorContext.js\"\r\n\r\nimport { getHasVoted, postHasVoted } from '../model/hasVoted.js'\r\n\r\nimport ErrorBox from \"../views/errorDisplay.js\"\r\n\r\nexport function Voters (props) {\r\n    const [canVote, setCanVote] = useState()\r\n    const [numVotes, setNumVotes] = useState(0)\r\n\r\n    const loginInfo = useContext(UserContext)\r\n    const errorHandle = useContext(ErrorContext)\r\n\r\n    async function updateState () {\r\n        let user_has_voted = await getHasVoted({\"user_id\": loginInfo.userID, [props.content_type]: props.id})\r\n        let net_votes = await getHasVoted({[props.content_type]: props.id})\r\n\r\n        let response_user_voted = await user_has_voted.json()\r\n\r\n        if (user_has_voted.status < 300) {\r\n            setCanVote(!response_user_voted[\"has_voted\"])\r\n        }\r\n\r\n        let response_votes = await net_votes.json()\r\n\r\n        if (net_votes.status < 300) {\r\n            setNumVotes(response_votes[\"votes\"])\r\n        }\r\n    }\r\n\r\n    useEffect(() => updateState(), [])\r\n\r\n    async function Upvote (e) {\r\n        if (canVote) {\r\n            let response = await postHasVoted({\"user\": loginInfo.userID, \"username\": loginInfo.username, [props.content_type]: props.id, \"vote_type\": \"up\"})\r\n\r\n            if (response.status >= 400) {\r\n                let errors_body = await response.json()\r\n                errorHandle.setError(<ErrorBox msg=\"posting vote\" response={errors_body} />)\r\n            } else {\r\n                setCanVote(false)\r\n                setNumVotes(numVotes + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    async function Downvote (e) {\r\n        if (canVote) {\r\n            let response = await postHasVoted({\"user\": loginInfo.userID, \"username\": loginInfo.username, [props.content_type]: props.id, \"vote_type\": \"down\"})\r\n\r\n            if (response.status >= 400) {\r\n                let errors_body = await response.json()\r\n                errorHandle.setError(<ErrorBox msg=\"posting vote\" response={errors_body} />)\r\n            } else {\r\n                setCanVote(false)\r\n                setNumVotes(numVotes - 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"voteButtons\">\r\n            <div className={canVote ? \"Upvote\" : \"Upvote defunct\"} onClick={Upvote} ></div>\r\n            <div className=\"votes\">{numVotes}</div>\r\n            <div className={canVote ? \"Downvote\" : \"Downvote defunct\"} onClick={Downvote} ></div>\r\n        </div>\r\n    )\r\n}\r\n","E:\\Programming\\simple_quora\\src\\components\\enums\\db_enums.js",[],"E:\\Programming\\simple_quora\\src\\components\\enums\\content_type_enums.js",[],"E:\\Programming\\simple_quora\\src\\components\\controllers\\replies.js",[],"E:\\Programming\\simple_quora\\src\\components\\errorContext.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":58,"column":29,"nodeType":"147","endLine":58,"endColumn":31,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":66,"column":8,"nodeType":"147","endLine":66,"endColumn":10,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"151","line":83,"column":8,"nodeType":"147","endLine":83,"endColumn":10,"suggestions":"152"},{"ruleId":"145","severity":1,"message":"153","line":34,"column":36,"nodeType":"147","endLine":34,"endColumn":38,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getQ'. Either include it or remove the dependency array.","ArrayExpression",["157"],"React Hook useEffect has missing dependencies: 'getA' and 'getQ'. Either include them or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'backToAnswers', 'getA', and 'getC'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'updateState'. Either include it or remove the dependency array.",["160"],"no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [getQ]",{"range":"169","text":"170"},"Update the dependencies array to be: [getA, getQ]",{"range":"171","text":"172"},"Update the dependencies array to be: [backToAnswers, getA, getC]",{"range":"173","text":"174"},"Update the dependencies array to be: [updateState]",{"range":"175","text":"176"},[1805,1807],"[getQ]",[2155,2157],"[getA, getQ]",[2726,2728],"[backToAnswers, getA, getC]",[1116,1118],"[updateState]"]